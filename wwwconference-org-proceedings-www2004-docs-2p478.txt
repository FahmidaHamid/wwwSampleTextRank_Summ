 most of the algorithms that have been developed for text compression compression algorithms [5]. figure 1 shows the real effect of replacing n-grams using 500 most frequent n-grams in each group. as it can be seen in the figure, shorter n-grams lend themselves to compression better than longer n-grams. the novelty of the approach presented here is in using a genetic algorithm (ga) [2] to select best combination of n-grams to achieve optimal (or near optimal) compression ratio with the minimum number of n-grams for replacement. in this case we used 500 best n-grams of each group.  the best solution is the one that uses maximum number of n-grams because it causes most size reduction on the sample file. we needed a solution to produce good reduction with reasonable number of n-grams. fitness = reduction  + size (1) size restrains evolution from choosing very where, for each combination of 5, 4, 3 and 2-grams, reduction is the saving in the storage achieved by replacing its n-grams with new codes; size is the proportional size of the combination. thus, for some n-grams it is required to create glyphs for all presentation forms. after calculating the frequency of each n-gram, a genetic algorithm was employed to select the right n-grams of each group in order to get an optimal file reduction with the least possible number of n-grams.