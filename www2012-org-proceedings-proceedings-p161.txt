 our parallel game is playable in larger game scenarios beyond the scope of the original game. relative importance (priority) among game entities dictates the order of event execution. to inform the main thread that an event was executed successfully, a worker calls done. upon noti cation that an event was executed successfully, another event is dispatched to the same worker. when an event reaches a worker, it is passed to the application code. the application code at the worker adds the event to the local event-loop which respects its priority. the code for each game entity in rapt had to be split into two parts: one for simulation which runs in worker threads and another for rendering which runs in the main thread. to maintain the game view, the rendering state of each entity is replicated. we synchronize all replicas after each entity update. each worker handles a grid with all associated entities (enemies, and players). the state of each entity is updated in a single worker. when entities move between grids, they migrate with all their state to a di erent worker. ideally we should have one worker per core.